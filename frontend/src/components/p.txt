import React, { useState } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import "../style/formCreate.css";
import { useAuthStore } from "../store/AuthStore";

export const Prueba = () => {
    const { user} = useAuthStore();
  const {
    register,
    control,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm({
    defaultValues: {
      nombreCurso: "",
      categoria: "",
      autor: "",
      duracion: "",
      fechaCreacion: "",
      programas: "",
      presentacionLarga: "",
      presentacionCorta: "",
      resultadosAprendizaje: "",
      descripcionImagen: "",
      storytellingProblema: "",
      storytellingSolucion: "",
      storytellingFinal: "",
      palabrasClave: "",
      publicoObjetivo: "",
      units: [],
    },
  });

  // Manejo de Unidades y Lecciones
  const { fields: unitFields, append: addUnit, remove: removeUnit, update: updateUnit } = useFieldArray({
    control,
    name: "units",
  });

  const [isCourseInfoCollapsed, setIsCourseInfoCollapsed] = useState(false);
  const [collapsedUnits, setCollapsedUnits] = useState({});
  const [collapsedLessons, setCollapsedLessons] = useState({});

  // Alternar visibilidad del curso
  const toggleCourseInfo = () => {
    setIsCourseInfoCollapsed(!isCourseInfoCollapsed);
  };

  // Alternar visibilidad de unidades
  const toggleUnit = (unitIndex) => {
    setCollapsedUnits((prev) => ({
      ...prev,
      [unitIndex]: !prev[unitIndex],
    }));
  };

  // Alternar visibilidad de lecciones
  const toggleLesson = (unitIndex, lessonIndex) => {
    setCollapsedLessons((prev) => ({
      ...prev,
      [`${unitIndex}-${lessonIndex}`]: !prev[`${unitIndex}-${lessonIndex}`],
    }));
  };

  // Agregar nueva lección a una unidad
  const addLessonToUnit = (unitIndex) => {
    const currentLessons = unitFields[unitIndex]?.lessons || [];
    const newLesson = {
      tituloleccion: "",
      tematica: "",
      resultadoAprendizajeLeccion: "",
      tipoLeccion: "",
      caracteristicaLeccion: [],
      propositoStorytelling: "",
      duracion: "",
      semanaSugerida: "",
    };

    const updatedUnit = {
      ...unitFields[unitIndex],
      lessons: [...currentLessons, newLesson],
    };
    updateUnit(unitIndex, updatedUnit);
  };

  // Eliminar una lección de una unidad
  const removeLessonFromUnit = (unitIndex, lessonIndex) => {
    const currentLessons = unitFields[unitIndex]?.lessons || [];
    if (currentLessons.length > lessonIndex) {
      const updatedLessons = currentLessons.filter((_, i) => i !== lessonIndex);
      const updatedUnit = {
        ...unitFields[unitIndex],
        lessons: updatedLessons,
      };
      updateUnit(unitIndex, updatedUnit);
    }
  };

  // Agregar nueva característica a una lección
  const addCharacteristic = (unitIndex, lessonIndex) => {
    const lessons = unitFields[unitIndex]?.lessons || [];
    const lesson = lessons[lessonIndex];
    if (lesson) {
      const updatedLesson = {
        ...lesson,
        caracteristicaLeccion: [
          ...lesson.caracteristicaLeccion,
          { tipo: "", nombre: "", url: "" },
        ],
      };
      const updatedLessons = [...lessons];
      updatedLessons[lessonIndex] = updatedLesson;
      const updatedUnit = { ...unitFields[unitIndex], lessons: updatedLessons };
      updateUnit(unitIndex, updatedUnit);
    }
  };

  // Eliminar característica de una lección
  const removeCharacteristic = (unitIndex, lessonIndex, characteristicIndex) => {
    const lessons = unitFields[unitIndex]?.lessons || [];
    const lesson = lessons[lessonIndex];
    if (lesson) {
      const updatedCharacteristics = lesson.caracteristicaLeccion.filter(
        (_, i) => i !== characteristicIndex
      );
      const updatedLesson = {
        ...lesson,
        caracteristicaLeccion: updatedCharacteristics,
      };
      const updatedLessons = [...lessons];
      updatedLessons[lessonIndex] = updatedLesson;
      const updatedUnit = { ...unitFields[unitIndex], lessons: updatedLessons };
      updateUnit(unitIndex, updatedUnit);
    }
  };

  // Enviar el formulario
  const onSubmit = (data) => {
    console.log("Form Data:", data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="form-container">
      {/* Encabezado del Curso */}
      <div className="heading">Creación del Plan de Curso</div>
      <div className="course-header-container" onClick={toggleCourseInfo}>
        <h2 className="course-header">{watch("nombreCurso") || "Nombre del Curso"}</h2>
        <span className="course-header-icon">{isCourseInfoCollapsed ? "↓" : "↑"}</span>
      </div>

      {!isCourseInfoCollapsed && (
        <div className="form-row">
          <div className="form-group">
              <label htmlFor="nombreCurso">Nombre del Curso/Asignatura</label>
              <input
                id="nombreCurso"
                type="text"
                {...register('nombreCurso',)}
              />
              {errors.nombreCurso && <span className="error">{errors.nombreCurso.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="categoria">Categoría</label>
              <input
                id="categoria"
                type="text"
                {...register('categoria',)}
              />
              {errors.categoria && <span className="error">{errors.categoria.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="autor">Autor</label>
              <input
                id="autor"
                type="text"
                {...register('autor',)}
              />
              {errors.autor && <span className="error">{errors.autor.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="duracion">Duración</label>
              <input
                id="duracion"
                type="text"
                {...register('duracion',)}
              />
              {errors.duracion && <span className="error">{errors.duracion.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="fechaCreacion">Fecha Creación</label>
              <input
                id="fechaCreacion"
                type="date"
                {...register('fechaCreacion',)}
              />
              {errors.fechaCreacion && <span className="error">{errors.fechaCreacion.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="programas">Programas</label>
              <input
                id="programas"
                type="text"
                {...register('programas',)}
              />
              {errors.programas && <span className="error">{errors.programas.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="presentacionLarga">Presentación Larga del Curso</label>
              <textarea
                id="presentacionLarga"
                type="text"
                {...register('presentacionLarga',)}
                rows={4} 
                cols={50} 
              />
              {errors.presentacionLarga && <span className="error">{errors.presentacionLarga.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="presentacionCorta">Presentación Corta del Curso</label>
              <textarea
                id="presentacionCorta"
                type="text"
                {...register('presentacionCorta',)}
                rows={4} 
                cols={50} 
              />
              {errors.presentacionCorta && <span className="error">{errors.presentacionCorta.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="resultadosAprendizaje">Resultados de aprendizaje</label>
              <textarea
                id="resultadosAprendizaje"
                type="text"
                {...register('resultadosAprendizaje',)}
                rows={4} 
                cols={50} 
              />
              {errors.resultadosAprendizaje && <span className="error">{errors.resultadosAprendizaje.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="descripcionImagen">Descripción/Link Imagen</label>
              <textarea
                id="descripcionImagen"
                type="url"
                {...register('descripcionImagen',)}
                rows={4} 
                cols={50} 
              />
              {errors.descripcionImagen && <span className="error">{errors.descripcionImagen.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="storytellingProblema">Storytelling- Problema General</label>
              <textarea
                id="storytellingProblema"
                type="text"
                {...register('storytellingProblema',)}
                rows={4} 
                cols={50} 
              />
              {errors.storytellingProblema && <span className="error">{errors.storytellingProblema.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="storytellingSolucion">Storytelling- Solución General</label>
              <textarea
                id="storytellingSolucion"
                type="text"
                {...register('storytellingSolucion',)}
                rows={4} 
                cols={50} 
              />
              {errors.storytellingSolucion && <span className="error">{errors.storytellingSolucion.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="storytellingFinal">Storytelling - Final Feliz</label>
              <textarea
                id="storytellingFinal"
                type="text"
                {...register('storytellingFinal',)}
                rows={4} 
                cols={50} 
              />
              {errors.storytellingFinal && <span className="error">{errors.storytellingFinal.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="palabrasClave">Palabras Clave</label>
              <input
                id="palabrasClave"
                type="text"
                {...register('palabrasClave',)}
              />
              {errors.palabrasClave && <span className="error">{errors.palabrasClave.message}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="publicoObjetivo">Público Objetivo</label>
              <input
                id="publicoObjetivo"
                type="text"
                {...register('publicoObjetivo',)}
              />
              {errors.publicoObjetivo && <span className="error">{errors.publicoObjetivo.message}</span>}
            </div>
        </div>
      )}

      {/* Sección de Unidades */}
      <h2>Unidades</h2>
      {unitFields.map((unit, unitIndex) => (
        <div key={unit.id} className="form-unit">
          <div className="unit-header" onClick={() => toggleUnit(unitIndex)}>
            <h3>Unidad {unitIndex + 1}</h3>
            <span>{collapsedUnits[unitIndex] ? "↓" : "↑"}</span>
          </div>

          {!collapsedUnits[unitIndex] && (
            <>
              {/* Inputs para las Unidades */}
              <div className="form-group">
            <div className="">
              <label>Título de la Unidad:</label>
              <input
                id={`tituloUnidad-${unitIndex}`}
                {...register(`units[${unitIndex}].title`, { required: "Título de la unidad es obligatorio" })}
              />
            </div>
            <div>
              <label>Descripción de la Unidad:</label>
              <textarea
                id={`descripcionUnidad-${unitIndex}`}
                {...register(`units[${unitIndex}].description`)}
                rows={4} 
                cols={50} 
              />
            </div>
          </div>
              {/* Aquí irían las Lecciones */}
              <h3>Lecciones</h3>
              {unitFields[unitIndex]?.lessons?.map((lesson, lessonIndex) => (
                <div key={lessonIndex} className="form-lesson">
                  <div className="lesson-header" onClick={() => toggleLesson(unitIndex, lessonIndex)}>
                    <h4>Lección {lessonIndex + 1}</h4>
                    <span>{collapsedLessons[`${unitIndex}-${lessonIndex}`] ? "↓" : "↑"}</span>
                  </div>

                  {!collapsedLessons[`${unitIndex}-${lessonIndex}`] && (
                    <>
                     <div className="form-group">
                <label>Resultado de Aprendizaje:</label>
                <input
                  id={`resultadoAprendizajeLeccion-${unitIndex}-${lessonIndex}`}
                  {...register(`units[${unitIndex}].lessons[${lessonIndex}].resultadoAprendizajeLeccion`, { required: "Resultado de aprendizaje es obligatorio" })}
                />
              </div>

              <div className="form-group">
                <label>Tipo de Lección:</label>
                <input
                  id={`tipoLeccion-${unitIndex}-${lessonIndex}`}
                  {...register(`units[${unitIndex}].lessons[${lessonIndex}].tipoLeccion`, { required: "Tipo de lección es obligatorio" })}
                />
              </div>

              <div className="form-group">
                <label>Propósito del Storytelling:</label>
                <textarea
                  id={`propositoStorytelling-${unitIndex}-${lessonIndex}`}
                  {...register(`units[${unitIndex}].lessons[${lessonIndex}].propositoStorytelling`, { required: "Propósito del storytelling es obligatorio" })}
                  rows={4} 
                  cols={50} 
                />
              </div>

              <div className="form-group">
                <label>Duración:</label>
                <input
                  id={`duracionLeccion-${unitIndex}-${lessonIndex}`}
                  {...register(`units[${unitIndex}].lessons[${lessonIndex}].duracion`, { required: "Duración de la lección es obligatoria" })}
                />
              </div>

              <div className="form-group">
                <label>Semana Sugerida:</label>
                <input
                  id={`semanaSugerida-${unitIndex}-${lessonIndex}`}
                  {...register(`units[${unitIndex}].lessons[${lessonIndex}].semanaSugerida`, { required: "Semana sugerida es obligatoria" })}
                />
              </div>
                      {/* Características */}
                      <h4 className="h">Características de la Lección</h4>
                      {lesson.caracteristicaLeccion?.map((char, charIndex) => (
                        <div key={charIndex} className="form-group">
                          <select
  className="listaRecursos"
  {...register(`units[${unitIndex}].lessons[${lessonIndex}].caracteristicaLeccion[${charIndex}].tipo`)}
  onChange={(e) => {
    const otherInput = document.getElementById(`otroTipo-${unitIndex}-${lessonIndex}-${charIndex}`);
    if (e.target.value === "Otros") {
      otherInput.style.display = 'block';
    } else {
      otherInput.style.display = 'none';
      setValue(`units[${unitIndex}].lessons[${lessonIndex}].caracteristicaLeccion[${charIndex}].tipo`, e.target.value); // Actualiza el valor directamente
    }
  }}
>
  <option value="OVA">OVA</option>
  <option value="Videos">Videos</option>
  <option value="Infografía">Infografía</option>
  <option value="Quices">Quices</option>
  <option value="Foro">Foro</option>
  <option value="Entregable">Entregable</option>
  <option value="Otros">Otros</option>
</select>

<div id={`otroTipo-${unitIndex}-${lessonIndex}-${charIndex}`} style={{ display: 'none' }}>
  <label>Especificar Tipo de Recurso</label>
  <input
    type="text"
    onChange={(e) =>
      setValue(`units[${unitIndex}].lessons[${lessonIndex}].caracteristicaLeccion[${charIndex}].tipo`, e.target.value)
    } // Actualiza el valor del tipo directamente
  />
</div>
<label>Nombre de la Característica</label>
                  <input
                    {...register(`units[${unitIndex}].lessons[${lessonIndex}].caracteristicaLeccion[${charIndex}].nombre`)}
                  />
                  <label>URL</label>
                  <input
                    {...register(`units[${unitIndex}].lessons[${lessonIndex}].caracteristicaLeccion[${charIndex}].url`)}
                  />
                          <button
                            type="button"
                            onClick={() => removeCharacteristic(unitIndex, lessonIndex, charIndex)}
                          >
                            Eliminar Característica
                          </button>
                        </div>
                      ))}
                      <button
                        type="button"
                        onClick={() => addCharacteristic(unitIndex, lessonIndex)}
                      >
                        Añadir Característica
                      </button>
                    </>
                  )}
                  <button
                className="btn-cancel"
                type="button"
                onClick={() => removeLessonFromUnit(unitIndex, lessonIndex)}
              >
                Eliminar Lección
              </button>
                </div>
              ))}
              <button type="button" onClick={() => addLessonToUnit(unitIndex)}>
                Añadir Lección
              </button>
            </>
          )}
          <button type="button" onClick={() => removeUnit(unitIndex)}>
            Eliminar Unidad
          </button>
        </div>
      ))}
      <button type="button" onClick={() => addUnit({ title: "", lessons: [] })}>
        Añadir Unidad
      </button>
      <button type="submit">Guardar Curso</button>
    </form>
  );
};